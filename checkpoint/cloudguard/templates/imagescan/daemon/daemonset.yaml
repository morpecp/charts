{{- $config := fromYaml (include "imagescan.daemon.config" .) -}}
{{- if $config.featureConfig.enabled -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "agent.resource.name" $config }}
  namespace: {{ .Release.Namespace }}
  annotations:
    agentVersion: {{ $config.agentConfig.tag }}
  labels:
{{ include "common.labels.with.chart" $config | indent 4 }}
spec:
  selector:
    matchLabels:
{{ include "common.labels" $config | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.pod.annotations" $config | indent 8 }}
        # adding it so workload will be restarted to be updated with certificates that were re-generated
        timestamp: {{ now | quote }}
      labels:
{{ include "common.labels" $config | indent 8 }}
    spec:
{{ include "common.pod.properties" $config | indent 6 }}
      containers:
{{ include "telemetry.container" $config | indent 6 }}
      # Main container
      - name: {{ $config.agentName }}
        image: {{ template "agent.main.image" $config }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        securityContext:
{{- if eq (include "get.platform" $config) "openshift" }}
          privileged: true
{{- else }}
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
{{- end }}
        volumeMounts:
{{- if eq $config.containerRuntime "docker" }}
        - name: docker-sock-volume
          mountPath: /var/run/docker.sock
          readOnly: true
{{- end }}
        - name: serverkey-volume
          mountPath: /etc/serverkey
        - name: servercert-volume
          mountPath: /etc/servercert
        - name: clientcert-volume
          mountPath: /etc/clientcert
        - name: metrics
          mountPath: /metric
        - name: metrics-tail
          mountPath: /metric-tail
        command: ["/node_agent"]
        ports:
        - containerPort: 8443
{{- if $config.agentConfig.resources }}
        resources:
{{ toYaml $config.agentConfig.resources | indent 10 }}
        {{- end }}
        env:
{{ include "user.defined.env" $config | indent 8 }}
{{- if or (eq $config.containerRuntime "containerd") (eq $config.containerRuntime "cri-o") }}
        - name: USE_SHIM
          value: "true"
{{- end }}
{{- if or (eq $config.containerRuntime "containerd") (eq $config.containerRuntime "cri-o") }}
      - {{ $containerConfig := merge $config (dict "containerName" "shim") -}} 
        name: {{ $containerConfig.containerName }} 
        image: {{ template "agent.sidecar.image" $containerConfig }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        securityContext:
{{- if eq $config.containerRuntime "cri-o" }}
          privileged: true
{{- else }}
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
{{- end }}
        volumeMounts:
        - name: cri-sock-volume
          mountPath: /run/cri.sock
          readOnly: true
{{- if eq $config.containerRuntime "containerd" }}
        - name: containerd-sock-volume
          mountPath: /run/containerd/containerd.sock
          readOnly: true
{{- end }}
{{- if eq $config.containerRuntime "cri-o" }}
        - name: host
          mountPath: /host
          readOnly: false
        - name: ld-linux
          mountPath: /lib64/ld-linux-x86-64.so.2
          readOnly: true
{{- end }}
        - name: metrics
          mountPath: /metric
        - name: metrics-tail
          mountPath: /metric-tail
        command: ["/server"]
{{- if $config.agentConfig.shim.resources }}
        resources:
{{ toYaml $config.agentConfig.shim.resources | indent 10 }}
        {{- end }}
        env:
{{- if eq $config.containerRuntime "cri-o" }}
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/host/usr/bin
        - name: LD_LIBRARY_PATH
          value: /host/lib/x86_64-linux-gnu:/host/lib64:/host/usr/lib/x86_64-linux-gnu
{{- end }}
{{- if $config.agentConfig.shim.env }}
{{ toYaml $config.agentConfig.shim.env | indent 8 }}
{{- end -}}
{{- end }}
      volumes:
{{- if eq $config.containerRuntime "docker" }}
      - name: docker-sock-volume
        hostPath:
          path: /var/run/docker.sock
          type: Socket
{{- else }}
      - name: cri-sock-volume
        hostPath:
{{- if eq $config.containerRuntime "containerd" }}
          path: /run/containerd/containerd.sock
{{- else if eq $config.containerRuntime "cri-o" }}
          path: /run/crio/crio.sock
{{- end }}
          type: Socket
{{- if eq $config.containerRuntime "containerd" }}
      - name: containerd-sock-volume
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
{{- end }}
{{- if eq $config.containerRuntime "cri-o" }}
      - name: host
        hostPath:
          path: /
          type: Directory
      - name: ld-linux
        hostPath:
          path: /lib64/ld-linux-x86-64.so.2
          type: File
{{- end }}
{{- end }}
      - name: serverkey-volume
        secret:
          secretName: {{ template "agent.resource.name" $config }}
      - name: servercert-volume
        configMap:
          name: {{ template "agent.resource.name" $config }}
      - name: clientcert-volume
        configMap:
          name: {{ template "imagescan.engine.resource.name" . }}
          {{/* TODO: investigate why $config instead of "." fails */}}

      - name: config-volume-fluentbit
        configMap:
          name: {{ template "agent.resource.name" $config }}-fluentbit-metrics
      - name: metrics
        emptyDir: {}
      - name: metrics-tail
        emptyDir: {}
{{- end -}}  